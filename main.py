import asyncio
import logging
import json
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from shared import get_all_orders, ADMIN_ID, bot, STATUS_EMOJI_MAP, pluralize_days, get_full_name
from payment import payment_router
from executor_menu import executor_menu_router, is_executor, get_executor_menu_keyboard
from executor_menu import ExecutorStates

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
STATUS_EMOJI_MAP = {
    "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è": "üìù",
    "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è": "üÜï",
    "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": "ü§î",
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω": "üôã‚Äç‚ôÇÔ∏è",
    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üí≥",
    "–ü—Ä–∏–Ω—è—Ç–∞": "‚úÖ",
    "–í —Ä–∞–±–æ—Ç–µ": "‚è≥",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "üéâ",
    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ .env —Ñ–∞–π–ª–∞, –Ω–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–∑–∞—à–∏—Ç—ã–µ"
BOT_TOKEN = os.getenv("BOT_TOKEN", "7763016986:AAFW4Rwh012_bfh8Jt0E_zaq5abvzenr4bE")
# –î–æ–±–∞–≤–ª—è—é EXECUTOR_IDS
EXECUTOR_IDS = [int(x) for x in os.getenv("EXECUTOR_IDS", "123456789").split(",") if x.strip().isdigit()]

ALLOWED_EXTENSIONS = {"pdf", "docx", "png", "jpeg", "jpg"}
MAX_FILE_SIZE = 15 * 1024 * 1024  # 15 MB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
admin_router = Router()
dp.include_router(admin_router)
executor_router = Router()
dp.include_router(executor_router)
dp.include_router(payment_router)
dp.include_router(executor_menu_router)

# Google Sheets
GOOGLE_SHEET_ID = "1D15yyPKHyN1Vw8eRnjT79xV28cwL_q5EIZa97tgTF2U"
GOOGLE_SHEET_HEADERS = [
    "–ì—Ä—É–ø–ø–∞", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–¢–∏–ø —Ä–∞–±–æ—Ç—ã", "–ú–µ—Ç–æ–¥–∏—á–∫–∞", "–ó–∞–¥–∞–Ω–∏–µ", "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", "–î–∞—Ç–∞ —Å–¥–∞—á–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
]

# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
class AssignExecutor(StatesGroup):
    waiting_for_id = State()

class AdminApproval(StatesGroup):
    waiting_for_new_price = State()

# --- FSM –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
class ExecutorResponse(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()  # –ù–æ–≤—ã–π —ç—Ç–∞–ø

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class OrderState(StatesGroup):
    group_name = State()
    university_name = State()
    teacher_name = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gradebook = State()     # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subject = State()       # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subject_other = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    work_type = State()
    work_type_other = State()
    guidelines_choice = State()
    guidelines_upload = State()
    task_upload = State()
    example_choice = State()
    example_upload = State()
    deadline = State()
    comments = State()
    confirmation = State()

class AdminContact(StatesGroup):
    waiting_for_message = State()

class ClientRevision(StatesGroup):
    waiting_for_revision_comment = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# --- FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ---
class AdminSettings(StatesGroup):
    waiting_for_executor_name = State()
    waiting_for_executor_id = State()
    waiting_for_delete_id = State()

    # --- –ù–æ–≤—ã–π —ç—Ç–∞–ø FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
class ExecutorResponse(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()  # –ù–æ–≤—ã–π —ç—Ç–∞–ø

EXECUTORS_FILE = "executors.json"

def get_admin_settings_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="admin_add_executor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="admin_delete_executor")],
        [InlineKeyboardButton(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="admin_show_executors")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_keyboard_admin():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_skip_executor_name")]
    ])

def get_executors_list():
    if not os.path.exists(EXECUTORS_FILE):
        return []
    with open(EXECUTORS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except Exception:
            return []

def save_executors_list(executors):
    with open(EXECUTORS_FILE, "w", encoding="utf-8") as f:
        json.dump(executors, f, ensure_ascii=False, indent=4)

def get_executors_info_keyboard():
    executors = get_executors_list()
    if not executors:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="none")]])
    buttons = []
    for ex in executors:
        label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data="none")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_executors_delete_keyboard():
    executors = get_executors_list()
    if not executors:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="none")]])
    buttons = []
    for ex in executors:
        label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"admin_delete_executor_id_{ex['id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_executors_assign_keyboard(order_id):
    executors = get_executors_list()
    buttons = []
    if executors:
        for ex in executors:
            label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
            buttons.append([InlineKeyboardButton(text=label, callback_data=f"assign_executor_select_{ex['id']}")])
        buttons.append([InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data=f"assign_executor_manual_{order_id}")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_order_{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

@admin_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_menu(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID): return
    await state.clear()
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:", reply_markup=get_admin_settings_keyboard())

@admin_router.callback_query(F.data == "admin_settings")
async def admin_settings_menu_cb(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:", reply_markup=get_admin_settings_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_add_executor")
async def admin_add_executor_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_executor_name)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=get_skip_keyboard_admin())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_skip_executor_name", AdminSettings.waiting_for_executor_name)
async def admin_skip_executor_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_name="")
    await state.set_state(AdminSettings.waiting_for_executor_id)
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await callback.answer()

@admin_router.message(AdminSettings.waiting_for_executor_name)
async def admin_executor_name_input(message: Message, state: FSMContext):
    await state.update_data(executor_name=message.text)
    await state.set_state(AdminSettings.waiting_for_executor_id)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

@admin_router.message(AdminSettings.waiting_for_executor_id)
async def admin_executor_id_input(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    executor_id = int(message.text)
    data = await state.get_data()
    name = data.get("executor_name", "")
    executors = get_executors_list()
    if any(ex['id'] == executor_id for ex in executors):
        await message.answer("–¢–∞–∫–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å.")
        return
    executors.append({"id": executor_id, "name": name})
    save_executors_list(executors)
    await state.clear()
    await message.answer("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_settings_keyboard())
    await message.answer("üë• –¢–µ–∫—É—â–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:", reply_markup=get_executors_info_keyboard())

@admin_router.callback_query(F.data == "admin_delete_executor")
async def admin_delete_executor_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_delete_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_executors_delete_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_executor_id_"), AdminSettings.waiting_for_delete_id)
async def admin_delete_executor_confirm(callback: CallbackQuery, state: FSMContext):
    executor_id = int(callback.data.split("_")[-1])
    executors = get_executors_list()
    executors = [ex for ex in executors if ex['id'] != executor_id]
    save_executors_list(executors)
    await state.clear()
    await callback.message.edit_text("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!", reply_markup=get_admin_settings_keyboard())
    await callback.message.answer("üë• –¢–µ–∫—É—â–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:", reply_markup=get_executors_info_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_show_executors")
async def admin_show_executors(callback: CallbackQuery, state: FSMContext):
    executors = get_executors_list()
    if not executors:
        text = "–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
    else:
        text = "üë• –¢–µ–∫—É—â–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n" + "\n".join([
            f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}" for ex in executors
        ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
@executor_router.callback_query(F.data == "executor_back_to_price", ExecutorResponse.waiting_for_deadline)
async def executor_back_to_price_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    await state.set_state(ExecutorResponse.waiting_for_price)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:", reply_markup=get_price_keyboard(order_id))
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_menu")
async def admin_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=None)
    await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())
    await callback.answer()


def get_admin_keyboard():
    buttons = [
        [KeyboardButton(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_executor_confirm_keyboard(order_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_back_to_materials:{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_price_keyboard(order_id):
    buttons = [
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(500, 2501, 500)],
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(3000, 5001, 1000)],
        [InlineKeyboardButton(text="üí¨ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="price_manual")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_back_to_invite:{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deadline_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="deadline_1 –¥–µ–Ω—å"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="deadline_3 –¥–Ω—è"),
            InlineKeyboardButton(text="–î–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline_–î–æ –¥–µ–¥–ª–∞–π–Ω–∞"),
        ],
        [InlineKeyboardButton(text="üí¨ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="deadline_manual")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="executor_back_to_price")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_reply_keyboard():
    buttons = [
        [KeyboardButton(text="üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"), KeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_to_main_menu_keyboard():
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_keyboard():
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_yes_no_keyboard(prefix: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞' –∏ '–ù–µ—Ç'."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_yes"),
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{prefix}_no")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_user_order_keyboard(order_id, status):
    buttons = []
    # –ö–Ω–æ–ø–∫–∞ '–û–ø–ª–∞—Ç–∏—Ç—å' –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        buttons.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")])
    # –ö–Ω–æ–ø–∫–∞ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –≤—Å–µ–≥–¥–∞
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"user_cancel_order:{order_id}")])
    # –ö–Ω–æ–ø–∫–∞ '–ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫'
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="my_orders_list")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_work_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", callback_data="work_type_–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è")],
        [InlineKeyboardButton(text="–†–∞—Å—á—ë—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è", callback_data="work_type_–†–∞—Å—á—ë—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–ö—É—Ä—Å–æ–≤–∞—è", callback_data="work_type_–ö—É—Ä—Å–æ–≤–∞—è")],
        [InlineKeyboardButton(text="–¢–µ—Å—Ç", callback_data="work_type_–¢–µ—Å—Ç")],
        [InlineKeyboardButton(text="–û—Ç—á—ë—Ç", callback_data="work_type_–û—Ç—á—ë—Ç")],
        [InlineKeyboardButton(text="–î–∏–ø–ª–æ–º", callback_data="work_type_–î–∏–ø–ª–æ–º")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="work_type_other")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subject_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="–ú–∞—Ç. –∞–Ω–∞–ª–∏–∑", callback_data="subject_–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"),
            InlineKeyboardButton(text="–ê–ª–≥–µ–±—Ä–∞", callback_data="subject_–ê–ª–≥–µ–±—Ä–∞ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è")
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="subject_–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è", callback_data="subject_–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏")
        ],
        [
            InlineKeyboardButton(text="–§–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data="subject_–§–∏–ª–æ—Å–æ—Ñ–∏—è"),
            InlineKeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", callback_data="subject_–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
        ],
        [
            InlineKeyboardButton(text="–≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="subject_–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è"),
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="subject_–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏")
        ],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="subject_other")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_keyboard(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{prefix}")]
    ])
    
def get_confirmation_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")],
        [InlineKeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_admin_in_order")]
        # –ö–Ω–æ–ø–∫–∞ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' —É–±—Ä–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_final_approval_keyboard(order_id, price):
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ({price} ‚ÇΩ)", callback_data=f"final_approve_{order_id}_{price}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"final_change_price_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"final_reject_{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_comment_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_order_keyboard(order, show_materials_button=True):
    buttons = []
    if 'order_id' not in order:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ KeyError
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    status = order.get('status')
    executor_is_admin = str(order.get('executor_id')) == str(ADMIN_ID)
    # –ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è' –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    if status == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" and not executor_is_admin:
        buttons.append([
            InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign_executor_{order['order_id']}")
        ])
    # –ö–Ω–æ–ø–∫–∞ '–í–∑—è—Ç—å –∑–∞–∫–∞–∑' –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è' –∏–ª–∏ '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    if status in ["–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]:
        buttons.append([
            InlineKeyboardButton(text="‚ùáÔ∏è –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_self_take_{order['order_id']}")
        ])
    # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É"
    buttons.append([InlineKeyboardButton(text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É", callback_data=f"admin_save_to_gsheet:{order['order_id']}")])
    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏", callback_data=f"admin_delete_order:{order['order_id']}")])
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞"
    has_files = order.get('guidelines_file') or order.get('task_file') or order.get('example_file') or order.get('task_text')
    if show_materials_button and has_files:
        buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")])
    if not show_materials_button:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"admin_hide_materials:{order['order_id']}")])
    # –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@admin_router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: CallbackQuery, state: FSMContext):
    await show_admin_orders_list(callback)
    await callback.answer()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---

# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@admin_router.message(Command("admin"))
async def cmd_admin_panel(message: Message, state: FSMContext):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id != int(ADMIN_ID):
        return
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_admin_keyboard()
    )

async def show_admin_orders_list(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è edit_text –¥–ª—è callback –∏ answer –¥–ª—è message."""
    user_id = message_or_callback.from_user.id
    if user_id != int(ADMIN_ID): return

    orders = get_all_orders()
    if not orders:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        else:
            await message_or_callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    text = "–í—Å–µ –∑–∞–∫–∞–∑—ã:"
    keyboard_buttons = []
    for order in reversed(orders[-20:]): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        order_id = order['order_id']
        order_status = order.get('status', 'N/A')
        emoji = STATUS_EMOJI_MAP.get(order_status, "üìÑ")
        work_type_raw = order.get('work_type', '–ó–∞—è–≤–∫–∞')
        work_type = work_type_raw.replace('work_type_', '')
        first_name = order.get('first_name', '')
        last_name = order.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip()
        username = order.get('username', 'N/A')
        display_name = full_name if full_name else username
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –§–ò–û
        button_text = f"{emoji} {work_type} ‚Ññ{order_id} - {order_status}"
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"admin_view_order_{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    if hasattr(message_or_callback, 'message'):
        try:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await message_or_callback.message.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.answer(text, reply_markup=keyboard)

@admin_router.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def show_all_orders_handler(message_or_callback):
    await show_admin_orders_list(message_or_callback)

@admin_router.callback_query(F.data.startswith("admin_view_order_"))
async def admin_view_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID): return
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    status = target_order.get('status')

    if status == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' and 'executor_offer' in target_order:
        offer = target_order['executor_offer']
        executor_full_name = offer.get('executor_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        price = offer.get('price')
        deadline = offer.get('deadline', 'N/A')
        executor_comment = offer.get('executor_comment', '–ù–µ—Ç')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        deadline_str = pluralize_days(deadline)

        admin_notification = f"""‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_full_name} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"
    
<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>
üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ
‚è≥ <b>–°—Ä–æ–∫:</b> {deadline_str}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}"""

        keyboard = get_admin_final_approval_keyboard(order_id, price)
        try:
            await callback.message.edit_text(admin_notification, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await callback.message.answer(admin_notification, parse_mode="HTML", reply_markup=keyboard)

    elif status == '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É':
        submitted_work = target_order.get('submitted_work')
        submitted_at = target_order.get('submitted_at', '‚Äî')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
        admin_text = f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: <b>{work_type}</b>\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{submitted_at}</b>"
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_check_work_{order_id}")],
            [InlineKeyboardButton(text="–£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_approve_work_{order_id}")],
            [InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã", callback_data=f"admin_reject_work_{order_id}")]
        ])
        if submitted_work and submitted_work.get('file_id'):
            await callback.message.delete()
            await bot.send_document(
                callback.from_user.id,
                submitted_work['file_id'],
                caption=admin_text,
                parse_mode="HTML",
                reply_markup=admin_keyboard
            )
        else:
            await callback.message.edit_text(admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
            
    elif status == "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

        details_text = f"""{header}
–ì—Ä—É–ø–ø–∞: {group}
–í–£–ó: {university}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}
–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}
–ü—Ä–µ–¥–º–µ—Ç: {subject}
–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}
–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}
–ó–∞–¥–∞–Ω–∏–µ: {task}
–ü—Ä–∏–º–µ—Ä: {example}
–î–µ–¥–ª–∞–π–Ω: {deadline}"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_back")]
        ])
        
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)

    else: # --- –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ---
        summary_text = await build_summary_text(target_order)
        full_name = f"{target_order.get('first_name', '')} {target_order.get('last_name', '')}".strip()
        header = f"\n<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})</b>\n"
        if target_order.get('creation_date'):
            header += f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {target_order.get('creation_date')}\n"
        details_text = header + "\n" + summary_text
        show_materials_button = bool(
            target_order.get("guidelines_file") or
            target_order.get("task_file") or
            target_order.get("task_text") or
            target_order.get("example_file")
        )
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()

@admin_router.callback_query(F.data.startswith("assign_executor_"))
async def assign_executor_start_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID): return
    if callback.data.startswith("assign_executor_manual_"):
        try:
            order_id = int(callback.data.split("_")[-1])
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return
        await state.update_data(order_id=order_id)
        await assign_executor_manual_handler(callback, state)
        return
    try:
        order_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return
    await state.update_data(order_id=order_id)
    executors = get_executors_list()
    if executors:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=get_executors_assign_keyboard(order_id)
        )
        # –ù–µ —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∑–¥–µ—Å—å!
    else:
        await callback.message.edit_text(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:")
        await state.set_state(AssignExecutor.waiting_for_id)
    await callback.answer()

async def send_order_to_executor(message_or_callback, order_id: int, executor_id: int):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ orders.json)."""
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            target_order = order
            break
    if not target_order:
        text = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(text)
        else:
            await message_or_callback.answer(text)
        return

    target_order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    target_order['executor_id'] = executor_id
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")],
    ])
    try:
        await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
        success_text = f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å ID {executor_id}."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(success_text)
        else:
            await message_or_callback.answer(success_text)
    except Exception as e:
        error_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (ID: {executor_id}).\n\n<b>–û—à–∏–±–∫–∞:</b> {e}"
        target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        target_order.pop('executor_id', None)
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(error_text, parse_mode="HTML")
        else:
            await message_or_callback.answer(error_text, parse_mode="HTML")

@admin_router.callback_query(F.data.startswith("assign_executor_select_"))
async def assign_executor_select_handler(callback: CallbackQuery, state: FSMContext):
    print("assign_executor_select_handler called", callback.data)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ assign_executor_select_ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ (id)
    try:
        executor_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", show_alert=True)
        return
    data = await state.get_data()
    order_id = data.get('order_id')
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            target_order = order
            break
    if not target_order:
        await callback.message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        return
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    target_order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    target_order['executor_id'] = executor_id
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    try:
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å ID {executor_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.",
            reply_markup=None
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")]
    ])
    try:
        await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (ID: {executor_id}). –û—à–∏–±–∫–∞: {e}")
        target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        target_order.pop('executor_id', None)
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.clear()

@admin_router.callback_query(F.data == "assign_executor_manual")
async def assign_executor_manual_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AssignExecutor.waiting_for_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    await callback.answer()

@admin_router.message(AssignExecutor.waiting_for_id)
async def assign_executor_process_id_handler(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID): return
    
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    executor_id = int(message.text)
    data = await state.get_data()
    order_id = data.get('order_id')
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            order['executor_id'] = executor_id
            target_order = order
            break

    if not target_order:
        await message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
    await message.answer(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å ID {executor_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")]
    ])
    try:
        await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (ID: {executor_id}). –û—à–∏–±–∫–∞: {e}")
        target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        target_order.pop('executor_id', None)
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.clear()


async def send_order_files_to_user(user_id: int, order_data: dict, with_details: bool = True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–∫–∞–∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if with_details:
        details_text = await build_summary_text(order_data)
        await bot.send_message(user_id, "<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n" + details_text, parse_mode="HTML")

    async def send_file(file_data, caption):
        if not file_data: return
        if file_data['type'] == 'photo':
            await bot.send_photo(user_id, file_data['id'], caption=caption)
        else:
            await bot.send_document(user_id, file_data['id'], caption=caption)

    await send_file(order_data.get('guidelines_file'), "üìÑ –ú–µ—Ç–æ–¥–∏—á–∫–∞")
    
    if order_data.get('task_file'):
        await send_file(order_data.get('task_file'), "üìë –ó–∞–¥–∞–Ω–∏–µ")
    elif order_data.get('task_text'):
        await bot.send_message(user_id, f"üìë –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order_data['task_text']}")
    
    await send_file(order_data.get('example_file'), "üìÑ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_full_name(user_or_dict):
    if isinstance(user_or_dict, dict):
        first = user_or_dict.get('first_name', '')
        last = user_or_dict.get('last_name', '')
    else:
        first = getattr(user_or_dict, 'first_name', '')
        last = getattr(user_or_dict, 'last_name', '')
    full = f"{first} {last}".strip()
    return full if full else "–ë–µ–∑ –∏–º–µ–Ω–∏"
# --- –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
@executor_router.callback_query(F.data.startswith("executor_accept_"))
async def executor_accept_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = None
    for o in orders:
        if o.get("order_id") == order_id:
            if o.get('executor_id') != callback.from_user.id:
                 await callback.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å –∏–ª–∏ –æ–Ω–æ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
                 return
            o['status'] = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω"
            target_order = o
            break
    if not target_order:
        await callback.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.set_state(ExecutorResponse.waiting_for_price)
    await state.update_data(order_id=order_id)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:", reply_markup=get_price_keyboard(order_id))
    await callback.answer()

@executor_router.callback_query(F.data.startswith("price_"), ExecutorResponse.waiting_for_price)
async def executor_price_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if callback.data == "price_manual":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_price_keyboard(order_id))
        return
    price = callback.data.split("_")[-1]
    await state.update_data(price=price)
    await state.set_state(ExecutorResponse.waiting_for_deadline)
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    from shared import get_all_orders
    orders = get_all_orders()
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    client_deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω') if order else '–ù–µ —É–∫–∞–∑–∞–Ω'
    text = f"–¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ‚è≥\n–î–µ–¥–ª–∞–π–Ω: –¥–æ {client_deadline}"
    await callback.message.edit_text(text, reply_markup=get_deadline_keyboard())
    await callback.answer()

@executor_router.message(ExecutorResponse.waiting_for_price)
async def executor_price_manual_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.", reply_markup=get_price_keyboard(order_id))
        return
    await state.update_data(price=message.text)
    await state.set_state(ExecutorResponse.waiting_for_deadline)
    await message.answer("–¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_deadline_keyboard())

@executor_router.callback_query(F.data.startswith("deadline_"), ExecutorResponse.waiting_for_deadline)
async def executor_deadline_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data == "deadline_manual":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é:")
        return
    deadline = callback.data.split("_", 1)[-1]
    await state.update_data(deadline=deadline)
    await state.set_state(ExecutorResponse.waiting_for_comment)
    await callback.message.edit_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_executor_comment_keyboard())
    await callback.answer()
def get_executor_comment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_executor_comment")]
    ])

@executor_router.message(ExecutorResponse.waiting_for_deadline)
async def executor_deadline_manual_handler(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(ExecutorResponse.waiting_for_comment)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_executor_comment_keyboard())

# --- –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@executor_router.message(ExecutorResponse.waiting_for_comment)
async def executor_comment_handler(message: Message, state: FSMContext):
    await state.update_data(executor_comment=message.text)
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    price = fsm_data.get('price', '‚Äî')
    deadline = fsm_data.get('deadline', '‚Äî')
    comment = fsm_data.get('executor_comment', '')
    # –°–∫–ª–æ–Ω—è–µ–º –¥–Ω–∏, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    def _pluralize_days(val):
        try:
            n = int(val)
            if 11 <= n % 100 <= 14:
                return f"{n} –¥–Ω–µ–π"
            elif n % 10 == 1:
                return f"{n} –¥–µ–Ω—å"
            elif 2 <= n % 10 <= 4:
                return f"{n} –¥–Ω—è"
            else:
                return f"{n} –¥–Ω–µ–π"
        except Exception:
            return str(val)
    deadline_str = _pluralize_days(deadline)
    text = f"<b>‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è:</b>\n\n" \
           f"<b>üè∑ –¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n" \
           f"<b>üóì –°—Ä–æ–∫:</b> {deadline_str}\n\n" \
           f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '–ù–µ—Ç'}"
    await state.set_state(ExecutorResponse.waiting_for_confirm)
    await message.answer(text, parse_mode="HTML", reply_markup=get_executor_final_confirm_keyboard(order_id))

@executor_router.callback_query(F.data == "skip_executor_comment", ExecutorResponse.waiting_for_comment)
async def executor_skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_comment="")
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    price = fsm_data.get('price', '‚Äî')
    deadline = fsm_data.get('deadline', '‚Äî')
    comment = ''
    def _pluralize_days(val):
        try:
            n = int(val)
            if 11 <= n % 100 <= 14:
                return f"{n} –¥–Ω–µ–π"
            elif n % 10 == 1:
                return f"{n} –¥–µ–Ω—å"
            elif 2 <= n % 10 <= 4:
                return f"{n} –¥–Ω—è"
            else:
                return f"{n} –¥–Ω–µ–π"
        except Exception:
            return str(val)
    deadline_str = _pluralize_days(deadline)
    text = f"<b>‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è:</b>\n\n" \
           f"<b>üè∑ –¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n" \
           f"<b>üóì –°—Ä–æ–∫:</b> {deadline_str}\n\n" \
           f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> –ù–µ—Ç"
    await state.set_state(ExecutorResponse.waiting_for_confirm)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_executor_final_confirm_keyboard(order_id))
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' ---
@executor_router.callback_query(F.data.startswith("executor_send_offer:"), ExecutorResponse.waiting_for_confirm)
async def executor_send_offer_handler(callback: CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    await send_offer_to_admin(callback.from_user, fsm_data)
    await callback.message.edit_text("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()
    await callback.answer()



@executor_router.message(ExecutorResponse.waiting_for_comment)
async def executor_comment_handler(message: Message, state: FSMContext):
    await state.update_data(executor_comment=message.text)
    fsm_data = await state.get_data()
    await send_offer_to_admin(message.from_user, fsm_data)
    await message.answer("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

@executor_router.callback_query(F.data == "skip_executor_comment", ExecutorResponse.waiting_for_comment)
async def executor_skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_comment="")
    fsm_data = await state.get_data()
    await send_offer_to_admin(callback.from_user, fsm_data)
    await callback.message.edit_text("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()
    await callback.answer()



# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---

@admin_router.callback_query(F.data.startswith("final_change_price_"))
async def admin_change_price_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.set_state(AdminApproval.waiting_for_new_price)
    await state.update_data(order_id=order_id, message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await callback.answer()

@admin_router.message(AdminApproval.waiting_for_new_price)
async def admin_process_new_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return

    new_price = int(message.text)
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    message_id = fsm_data.get('message_id')

    # –û–±–Ω–æ–≤–ª—è–µ–º JSON
    orders = get_all_orders()
    executor_full_name = ''
    executor_deadline = ''
    for order in orders:
        if order.get("order_id") == order_id:
            order['executor_offer']['price'] = new_price
            executor_full_name = order['executor_offer'].get('executor_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            executor_deadline = order['executor_offer'].get('deadline', 'N/A')
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
    executor_deadline_str = pluralize_days(executor_deadline)
    admin_notification = f"""
    ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_full_name} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_id}
    
    <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (—Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞):</b>
    üí∞ <b>–¶–µ–Ω–∞:</b> {new_price} ‚ÇΩ
    ‚è≥ <b>–°—Ä–æ–∫:</b> {executor_deadline_str}
    """
    await bot.edit_message_text(
        admin_notification, 
        chat_id=message.chat.id,
        message_id=message_id,
        parse_mode="HTML",
        reply_markup=get_admin_final_approval_keyboard(order_id, new_price)
    )
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π –æ—Ç –∞–¥–º–∏–Ω–∞
    await state.clear()


@admin_router.callback_query(F.data.startswith("final_approve_"))
async def admin_final_approve(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    order_id = int(parts[2])
    price = int(parts[3])

    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            order['final_price'] = price
            target_order = order
            break
    
    if not target_order:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    customer_id = target_order.get('user_id')
    if customer_id:
        deadline = target_order.get('executor_offer', {}).get('deadline') or target_order.get('deadline', '')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        customer_text = f"""
‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}"\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–µ–¥–ª–∞–π–Ω: {deadline_str}

<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ.
<b>–°—Ä–æ–∫:</b> {deadline_str}
"""
        # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
        payment_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[payment_button]])
        try:
            await bot.send_message(customer_id, customer_text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {customer_id}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor_id = target_order.get('executor_offer', {}).get('executor_id')
    if executor_id:
        try:
            subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            await bot.send_message(executor_id, f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É.\n–ü—Ä–µ–¥–º–µ—Ç: "{subject}"\n–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.')
        except Exception:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id}")

    await callback.message.edit_text(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {price} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...")
    await callback.answer()


@admin_router.callback_query(F.data.startswith("final_reject_"))
async def admin_final_reject(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    
    orders = get_all_orders()
    target_order = None
    executor_id = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø–æ–∏—Å–∫—É
            executor_id = order.get('executor_offer', {}).get('executor_id')
            order.pop('executor_offer', None)
            target_order = order
            break

    if not target_order:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    
    if executor_id:
        try:
            await bot.send_message(executor_id, f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.")
        except Exception:
            pass # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    await callback.message.edit_text(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}. –ó–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –≤ –ø–æ–∏—Å–∫–µ.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_approve_work_"))
async def admin_approve_work_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)

    if not target_order or 'submitted_work' not in target_order:
        await callback.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.", show_alert=True)
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    target_order['status'] = "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    customer_id = target_order.get('user_id')
    submitted_work = target_order.get('submitted_work')
    submitted_at = target_order.get('submitted_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    if customer_id and submitted_work:
        try:
            caption = f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –≥–æ—Ç–æ–≤–∞!\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
            keyboard = get_client_work_approval_keyboard(order_id)
            await bot.send_document(
                chat_id=customer_id,
                document=submitted_work['file_id'],
                caption=caption,
                reply_markup=keyboard
            )
            await callback.message.edit_text(f"‚úÖ –†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.")
        except Exception as e:
            await callback.message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç—É {customer_id}. –û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –º–µ–Ω—é
    if is_executor(message.from_user.id):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=get_executor_menu_keyboard()
        )
        return
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=get_main_reply_keyboard()
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def txt_help(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.'
    )

@router.message(F.text == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def txt_contact_admin(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AdminContact.waiting_for_message)
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_back_to_main_menu_keyboard()
    )

@router.message(AdminContact.waiting_for_message)
async def universal_admin_message_handler(message: Message, state: FSMContext):
    if message.from_user.id == int(ADMIN_ID):
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        data = await state.get_data()
        user_id = data.get("reply_user_id")
        reply_msg_id = data.get("reply_msg_id")
        if user_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if is_executor(user_id):
                await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}", reply_markup=get_executor_menu_keyboard())
            else:
                await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
            try:
                await bot.delete_message(ADMIN_ID, reply_msg_id)
            except:
                pass
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
    else:
        # –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω—É
        admin_msg = await bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_full_name(message.from_user)} (ID: {message.from_user.id}):\n\n"
            f'"{message.text}"',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_user:{message.from_user.id}"),
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_delete_user_msg")
                ]
            ])
        )
        await state.clear()
        await state.update_data(
            last_user_msg_text=message.text,
            last_user_id=message.from_user.id
        )
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_reply_keyboard()
        )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ ---

def get_user_orders(user_id: int) -> list:
    """–ß–∏—Ç–∞–µ—Ç orders.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ user_id."""
    file_path = "orders.json"
    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        try:
            all_orders = json.load(f)
        except json.JSONDecodeError:
            return []
    
    if not isinstance(all_orders, list):
        return []

    user_orders = [order for order in all_orders if isinstance(order, dict) and order.get('user_id') == user_id]
    return user_orders

async def show_my_orders(message_or_callback: types.Message | types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    user_id = message_or_callback.from_user.id
    orders = get_user_orders(user_id)
    draft_orders_exist = any(o.get('status') == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è" for o in orders)

    if not orders:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
        keyboard = None
    else:
        text = "–í–æ—Ç –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:"
        if draft_orders_exist:
            text = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n" + text
        keyboard_buttons = []
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for order in reversed(orders[-10:]): 
            order_id = order['order_id']
            order_status = order.get('status', 'N/A')
            emoji = STATUS_EMOJI_MAP.get(order_status, "üìÑ")
            
            work_type_raw = order.get('work_type', '–ó–∞—è–≤–∫–∞')
            work_type = work_type_raw.replace('work_type_', '')
            
            button_text = f"{emoji} –ó–∞—è–≤–∫–∞  ‚Ññ{order_id} {work_type}  | {order_status}"
            
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"view_order_{order_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        try:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            await message_or_callback.answer()
        except:
            await message_or_callback.message.answer(text, reply_markup=keyboard)
            await message_or_callback.answer()

@router.message(F.text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message, state: FSMContext):
    await state.clear()
    await show_my_orders(message)

@router.callback_query(F.data == "my_orders_list")
async def back_to_my_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_my_orders(callback)


@router.callback_query(F.data.startswith("view_order_"))
async def view_order_handler(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", show_alert=True)
        return
    user_id = callback.from_user.id
    orders = get_user_orders(user_id)
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞—è–≤–∫—É –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return
        
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if target_order.get('status') == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è":
        await state.set_data(target_order)
        await state.set_state(OrderState.confirmation)
        summary_text = await build_summary_text(target_order)
        await callback.message.edit_text(
            text=summary_text, 
            reply_markup=get_confirmation_keyboard(), 
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" ---
    if target_order.get('status') == "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        submitted_work = target_order.get('submitted_work')
        submitted_at = target_order.get('submitted_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if submitted_work:
            caption = f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –≥–æ—Ç–æ–≤–∞!\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
            keyboard = get_client_work_approval_keyboard(order_id)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                await callback.message.delete()
            except: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (—É–∂–µ —É–¥–∞–ª–µ–Ω–æ) - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
                pass
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=submitted_work['file_id'],
                caption=caption,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    status = target_order.get('status', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    status_text = f"{STATUS_EMOJI_MAP.get(status, 'üìÑ')} {status}"
    details_text = f"""
<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{target_order['order_id']}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

<b>–ì—Ä—É–ø–ø–∞:</b> {target_order.get('group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:</b> {target_order.get('university_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {'‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'}
<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'}
<b>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</b> {'‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'}
<b>–î–∞—Ç–∞ —Å–¥–∞—á–∏:</b> {target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {target_order.get('comments', '–ù–µ—Ç')}
    """
    keyboard = get_user_order_keyboard(order_id, status)
    await callback.message.edit_text(details_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()
# --- –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ ---

@router.message(F.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_new_order(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(OrderState.group_name)
    await message.answer(
        "üìù –ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.",
        reply_markup=get_back_keyboard()
    )

@router.message(OrderState.group_name)
async def process_group_name(message: Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await state.set_state(OrderState.university_name)
    await message.answer("üè´ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", reply_markup=get_back_keyboard())

@router.message(OrderState.university_name)
async def process_university_name(message: Message, state: FSMContext):
    await state.update_data(university_name=message.text)
    await state.set_state(OrderState.teacher_name)
    await message.answer("üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=get_back_keyboard())

@router.message(OrderState.teacher_name)
async def process_teacher_name(message: Message, state: FSMContext):
    await state.update_data(teacher_name=message.text)
    await state.set_state(OrderState.gradebook)
    await message.answer("üìí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞—á–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Ññ24-15251):", reply_markup=get_back_keyboard())

@router.message(OrderState.gradebook)
async def process_gradebook(message: Message, state: FSMContext):
    await state.update_data(gradebook=message.text)
    await state.set_state(OrderState.subject)
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=get_subject_keyboard())

@router.callback_query(OrderState.subject, F.data.startswith("subject_"))
async def process_subject_choice(callback: CallbackQuery, state: FSMContext):
    subject = callback.data.split("_", 1)[-1]
    if subject == "other":
        await state.set_state(OrderState.subject_other)
        await callback.message.edit_text("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    else:
        await state.update_data(subject=subject)
        await state.set_state(OrderState.work_type)
        await callback.message.edit_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=get_work_type_keyboard())
    await callback.answer()

@router.message(OrderState.subject_other)
async def process_subject_other_input(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await state.set_state(OrderState.work_type)
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=get_work_type_keyboard())

@router.callback_query(OrderState.work_type, F.data.startswith("work_type_"))
async def process_work_type_choice(callback: CallbackQuery, state: FSMContext):
    work_type = callback.data
    
    if work_type == "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)":
        await state.set_state(OrderState.work_type_other)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –≤—Ä—É—á–Ω—É—é.", reply_markup=get_back_keyboard())
    else:
        await state.update_data(work_type=work_type)
        await state.set_state(OrderState.guidelines_choice)
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))
    await callback.answer()

@router.message(OrderState.work_type_other)
async def process_work_type_other(message: Message, state: FSMContext):
    await state.update_data(work_type=message.text)
    await state.set_state(OrderState.guidelines_choice)
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))


@router.callback_query(OrderState.guidelines_choice, F.data.startswith("guidelines_"))
async def process_guidelines_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[1]
    if choice == "yes":
        await state.update_data(has_guidelines=True)
        await state.set_state(OrderState.guidelines_upload)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç–æ–¥–∏—á–∫–æ–π (pdf, docx, png, jpeg).", reply_markup=get_back_keyboard())
    else:
        await state.update_data(has_guidelines=False, guidelines_file=None)
        await state.set_state(OrderState.task_upload)
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())
    await callback.answer()


@router.message(OrderState.guidelines_upload, F.document | F.photo)
async def process_guidelines_upload(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if message.document:
        ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
        if ext not in ALLOWED_EXTENSIONS:
            await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        guidelines_file = {'id': message.document.file_id, 'type': 'document'}
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        if photo.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        guidelines_file = {'id': photo.file_id, 'type': 'photo'}
    await state.update_data(guidelines_file=guidelines_file)
    await state.set_state(OrderState.task_upload)
    await message.answer("‚úÖ –ú–µ—Ç–æ–¥–∏—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())


@router.message(OrderState.task_upload, F.text | F.document | F.photo)
async def process_task_upload(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(task_text=message.text, task_file=None)
    else:
        if message.document:
            ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
            if ext not in ALLOWED_EXTENSIONS:
                await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            if message.document.file_size > MAX_FILE_SIZE:
                await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
                return
            task_file = {'id': message.document.file_id, 'type': 'document'}
        else:
            photo = message.photo[-1]
            if photo.file_size > MAX_FILE_SIZE:
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
                return
            task_file = {'id': photo.file_id, 'type': 'photo'}
        await state.update_data(task_file=task_file, task_text=None)
    await state.set_state(OrderState.example_choice)
    await message.answer("üìë –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã?", reply_markup=get_yes_no_keyboard("example"))


@router.callback_query(OrderState.example_choice, F.data.startswith("example_"))
async def process_example_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[-1]
    if choice == "yes":
        await state.update_data(has_example=True)
        await state.set_state(OrderState.example_upload)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º (pdf, docx, pgn, jpeg).", reply_markup=get_back_keyboard())
    else: 
        await state.update_data(has_example=False, example_file=None)
        await state.set_state(OrderState.deadline)
        await callback.message.edit_text("üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())
    await callback.answer()


@router.message(OrderState.example_upload, F.document | F.photo)
async def process_example_upload(message: Message, state: FSMContext):
    if message.document:
        ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
        if ext not in ALLOWED_EXTENSIONS:
            await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        example_file = {'id': message.document.file_id, 'type': 'document'}
    else:
        photo = message.photo[-1]
        if photo.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        example_file = {'id': photo.file_id, 'type': 'photo'}
    await state.update_data(example_file=example_file)
    await state.set_state(OrderState.deadline)
    await message.answer("‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

@router.message(OrderState.deadline)
async def process_deadline(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(deadline=message.text)
        await state.set_state(OrderState.comments)
        await message.answer(
            "üí¨ –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", 
            reply_markup=get_skip_comment_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

@router.callback_query(F.data == "skip_comment", OrderState.comments)
async def skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comments="–ù–µ—Ç")
    data = await state.get_data()
    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫! –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary_text = await build_summary_text(data)
    await state.set_state(OrderState.confirmation)
    await callback.message.edit_text(summary_text, reply_markup=get_confirmation_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.message(OrderState.comments)
async def process_comments(message: Message, state: FSMContext):
    await state.update_data(comments=message.text)
    data = await state.get_data()
    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫! –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary_text = await build_summary_text(data)
    await state.set_state(OrderState.confirmation)
    await message.answer(text=summary_text, reply_markup=get_confirmation_keyboard(), parse_mode="HTML")


async def build_summary_text(data: dict) -> str:
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ."""
    group = data.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    university = data.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    teacher = data.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    gradebook = data.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
    subject = data.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
    work_type_key = data.get("work_type", "N/A").replace("work_type_", "")
    
    work_type_str = work_type_key if work_type_key != 'other' else data.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
    
    guidelines = '‚úÖ –î–∞' if data.get('has_guidelines') else '‚ùå –ù–µ—Ç'
    task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if data.get('task_file') or data.get('task_text') else '‚ùå –ù–µ—Ç'
    example = '‚úÖ –î–∞' if data.get('has_example') else '‚ùå –ù–µ—Ç'
    deadline = data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    comments = data.get('comments', '–ù–µ—Ç')
    return f"""

<b>–ì—Ä—É–ø–ø–∞:</b> {group}
<b>–í–£–ó:</b> {university}
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {teacher}
<b>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏:</b> {gradebook}
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}
<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type_str}
<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {guidelines}
<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task}
<b>–ü—Ä–∏–º–µ—Ä:</b> {example}
<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}
"""
    if comments:
        return f"{summary_text}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {comments}"
    return summary_text

async def build_short_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç-—Å–≤–æ–¥–∫—É –ø–æ –∑–∞—è–≤–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    work_type = data.get("work_type", "–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω").replace("type_", "").capitalize()
    if work_type == "Other":
        work_type = data.get("work_type_other_name", "–î—Ä—É–≥–æ–µ")

    subject = data.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
    deadline = data.get("deadline", "–ù–µ —É–∫–∞–∑–∞–Ω")
    text = (f"<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
            f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n"
            f"<b>–°—Ä–æ–∫:</b> –¥–æ {deadline}")
    return text

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---

async def save_or_update_order(order_data: dict) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É –≤ orders.json."""
    file_path = "orders.json"
    orders = []
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []
    
    order_id_to_process = order_data.get("order_id")
    user_id_to_process = order_data.get("user_id")
    status_to_process = order_data.get("status")

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è ("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"), —É–¥–∞–ª—è–µ–º –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å —ç—Ç–∏–º order_id –∏ user_id
    if status_to_process == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" and order_id_to_process and user_id_to_process:
        orders = [o for o in orders if not (
            o.get("order_id") == order_id_to_process and o.get("user_id") == user_id_to_process and o.get("status") == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è"
        )]

    if order_id_to_process: # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        found = False
        for i, order in enumerate(orders):
            if order.get("order_id") == order_id_to_process:
                orders[i] = order_data
                found = True
                break
        if not found: # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é
             order_id_to_process = (orders[-1]['order_id'] + 1) if orders else 1
             order_data["order_id"] = order_id_to_process
             orders.append(order_data)
    else: # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        order_id_to_process = (orders[-1]['order_id'] + 1) if orders else 1
        order_data["order_id"] = order_id_to_process
        orders.append(order_data)
    
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    
    return order_id_to_process

@router.callback_query(OrderState.confirmation, F.data == "confirm_order")
async def process_confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
    data['user_id'] = callback.from_user.id
    data['username'] = callback.from_user.username or "N/A"
    data['first_name'] = callback.from_user.first_name
    data['last_name'] = callback.from_user.last_name or ""
    data['creation_date'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    order_id = await save_or_update_order(data)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    summary = await build_summary_text(data)
    full_name = f"{data.get('first_name', '')} {data.get('last_name', '')}".strip()
    admin_text = f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n\n{summary}"
    admin_keyboard = get_admin_order_keyboard(data, show_materials_button=True)
    await bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
    # –†–∞—Å—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    if EXECUTOR_IDS:
        short_summary = await build_short_summary_text(data)
        notification_text = f"üì¢ –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id}\n\n" + short_summary
        for executor_id in EXECUTOR_IDS:
            try:
                await bot.send_message(executor_id, notification_text, parse_mode="HTML")
            except Exception as e:
                print(f"Failed to send notification to executor {executor_id}: {e}")
    await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∞!", reply_markup=None)
    await state.clear()
    await callback.answer()

@router.callback_query(OrderState.confirmation, F.data == "cancel_order")
async def process_cancel_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    user_id = callback.from_user.id
    file_path = "orders.json"
    orders = []
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º order_id
    new_orders = [o for o in orders if not (str(o.get("order_id")) == str(order_id) and o.get("user_id") == user_id)]
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)
    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(OrderState.confirmation, F.data == "contact_admin_in_order")
async def process_contact_admin_in_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminContact.waiting_for_message)
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
@router.callback_query(F.data == "back", StateFilter(OrderState))
async def process_back_button(callback: CallbackQuery, state: FSMContext):
    current_state_str = await state.get_state()

    async def go_to_group_name(s: FSMContext):
        await s.set_state(OrderState.group_name)
        await callback.message.edit_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
    
    async def go_to_university_name(s: FSMContext):
        await s.set_state(OrderState.university_name)
        await callback.message.edit_text("üè´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", reply_markup=get_back_keyboard())

    async def go_to_work_type(s: FSMContext):
        await s.set_state(OrderState.work_type)
        await callback.message.edit_text("üìò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=get_work_type_keyboard())

    async def go_to_guidelines_choice(s: FSMContext):
        await s.set_state(OrderState.guidelines_choice)
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))
    
    async def go_to_task_upload(s: FSMContext):
        await s.set_state(OrderState.task_upload)
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())

    async def go_to_example_choice(s: FSMContext):
        await s.set_state(OrderState.example_choice)
        await callback.message.edit_text("üìë –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã?", reply_markup=get_yes_no_keyboard("example"))

    async def go_to_deadline(s: FSMContext):
        await s.set_state(OrderState.deadline)
        await callback.message.edit_text("üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

    async def go_to_comments(s: FSMContext):
        await s.set_state(OrderState.comments)
        await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.", reply_markup=get_back_keyboard())

    back_transitions = {
        OrderState.university_name: go_to_group_name,
        OrderState.work_type: go_to_university_name,
        OrderState.work_type_other: go_to_work_type,
        OrderState.guidelines_choice: go_to_work_type,
        OrderState.guidelines_upload: go_to_guidelines_choice,
        OrderState.task_upload: go_to_guidelines_choice,
        OrderState.example_choice: go_to_task_upload,
        OrderState.example_upload: go_to_example_choice,
        OrderState.deadline: go_to_example_choice,
        OrderState.comments: go_to_deadline,
        OrderState.confirmation: go_to_comments,
    }
    
    if current_state_str in back_transitions:
        await back_transitions[current_state_str](state)
    else: # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (group_name), —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–µ–∫—É–¥–∞
        await state.clear()
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    await callback.answer()


async def send_offer_to_admin(user, fsm_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ñ—Ñ–µ—Ä –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    order_id = fsm_data['order_id']
    price = fsm_data['price']
    executor_comment = fsm_data.get('executor_comment', '')
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ JSON
    orders = get_all_orders()
    subject = '–ù–µ —É–∫–∞–∑–∞–Ω'
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            order['executor_offer'] = {
                'price': price,
                'deadline': fsm_data['deadline'],
                'executor_id': user.id,
                'executor_username': user.username,
                'executor_full_name': get_full_name(user),
                'executor_comment': executor_comment
            }
            subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    admin_notification = f"""
    ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {get_full_name(user)} (ID: {user.id}) –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"
    <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>
    üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ
    ‚è≥ <b>–°—Ä–æ–∫:</b> {fsm_data['deadline']}
    üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}
    """
    await bot.send_message(
        ADMIN_ID, 
        admin_notification, 
        parse_mode="HTML",
        reply_markup=get_admin_final_approval_keyboard(order_id, price)
    )


@admin_router.callback_query(F.data.startswith("admin_show_materials:"))
async def admin_show_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    material_buttons = []
    if order.get('guidelines_file'):
        material_buttons.append([InlineKeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞", callback_data=f"admin_material_guidelines:{order_id}")])
    if order.get('task_file') or order.get('task_text'):
        material_buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ", callback_data=f"admin_material_task:{order_id}")])
    if order.get('example_file'):
        material_buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data=f"admin_material_example:{order_id}")])
    material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"admin_hide_materials:{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=material_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_hide_materials:"))
async def admin_hide_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    details_text = await build_summary_text(order)
    details_text = f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç {get_full_name(order)}</b>\n\n" + details_text
    keyboard = get_admin_order_keyboard(order, show_materials_button=True)
    await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_guidelines:"))
async def admin_material_guidelines_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('guidelines_file'):
        await callback.answer("–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    file = order['guidelines_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_task:"))
async def admin_material_task_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if order.get('task_file'):
        file = order['task_file']
        if file['type'] == 'photo':
            await bot.send_photo(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
        else:
            await bot.send_document(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
    elif order.get('task_text'):
        await bot.send_message(callback.from_user.id, f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order['task_text']}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_example:"))
async def admin_material_example_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('example_file'):
        await callback.answer("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    file = order['example_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_order:"))
async def admin_delete_order_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    new_orders = [o for o in orders if str(o['order_id']) != str(order_id)]
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)
    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_orders_list")
async def admin_back_to_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    await show_admin_orders_list(callback.message)
    await callback.answer()
# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@executor_router.callback_query(F.data.startswith("executor_show_materials:"))
async def executor_show_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    material_buttons = []
    if order.get('guidelines_file'):
        material_buttons.append([InlineKeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞", callback_data=f"executor_material_guidelines:{order_id}")])
    if order.get('task_file') or order.get('task_text'):
        material_buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ", callback_data=f"executor_material_task:{order_id}")])
    if order.get('example_file'):
        material_buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data=f"executor_material_example:{order_id}")])
    material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_hide_materials:{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=material_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_hide_materials:"))
async def executor_hide_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    work_type = order.get('work_type', 'N/A').replace('work_type_', '')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
    ])
    await callback.message.edit_text(executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_guidelines:"))
async def executor_material_guidelines_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('guidelines_file'):
        await callback.answer("–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    file = order['guidelines_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_task:"))
async def executor_material_task_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if order.get('task_file'):
        file = order['task_file']
        if file['type'] == 'photo':
            await bot.send_photo(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
        else:
            await bot.send_document(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
    elif order.get('task_text'):
        await bot.send_message(callback.from_user.id, f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order['task_text']}")
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_example:"))
async def executor_material_example_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('example_file'):
        await callback.answer("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    file = order['example_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    await callback.answer()

# --- –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
@admin_router.callback_query(F.data.startswith("admin_reply_user:"))
async def admin_reply_user_handler(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.clear()
    await state.update_data(reply_user_id=user_id, reply_msg_id=callback.message.message_id)
    await state.set_state(AdminContact.waiting_for_message)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_user_msg")
async def admin_delete_user_msg_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(ADMIN_ID, callback.message.message_id)
    except:
        pass
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

@admin_router.callback_query(F.data.startswith("admin_save_to_gsheet:"))
async def admin_save_to_gsheet_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    row = [
        order.get("group_name", ""),
        order.get("university_name", ""),
        order.get("work_type", ""),
        "–î–∞" if order.get("has_guidelines") else "–ù–µ—Ç",
        "–ï—Å—Ç—å" if order.get("task_file") or order.get("task_text") else "–ù–µ—Ç",
        "–ï—Å—Ç—å" if order.get("example_file") else "–ù–µ—Ç",
        order.get("deadline", ""),
        order.get("comments", "")
    ]
    try:
        creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(GOOGLE_SHEET_ID)
        worksheet = sh.sheet1
        worksheet.append_row(row, value_input_option="USER_ENTERED")
        await callback.answer("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", show_alert=True)

# FSM –¥–ª—è –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserCancelOrder(StatesGroup):
    waiting_for_confirm = State()
    waiting_for_reason = State()
    waiting_for_custom_reason = State()

USER_CANCEL_REASONS = [
    "–†–µ—à–∏–ª(–∞) —Å–¥–µ–ª–∞—Ç—å —Å–∞–º(–∞)",
    "–ù–∞—à—ë–ª(–ª–∞) –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞",
    "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ",
    "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"
]

def get_cancel_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"user_cancel_confirm:{order_id}"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="user_cancel_abort")]
    ])

def get_cancel_reason_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=reason, callback_data=f"user_cancel_reason:{order_id}:{i}")]
        for i, reason in enumerate(USER_CANCEL_REASONS)
    ])

def get_admin_cancel_accept_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùáÔ∏è –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"admin_accept_cancel:{order_id}")]
    ])

@router.callback_query(F.data.startswith("user_cancel_order:"))
async def user_cancel_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(UserCancelOrder.waiting_for_confirm)
    await state.update_data(cancel_order_id=order_id)
    await callback.message.edit_text(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏?",
        reply_markup=get_cancel_confirm_keyboard(order_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("user_cancel_confirm:"), UserCancelOrder.waiting_for_confirm)
async def user_cancel_confirm(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(cancel_order_id=order_id)
    await state.set_state(UserCancelOrder.waiting_for_reason)
    await callback.message.edit_text(
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
        reply_markup=get_cancel_reason_keyboard(order_id)
    )
    await callback.answer()

@router.callback_query(F.data == "user_cancel_abort", UserCancelOrder.waiting_for_confirm)
async def user_cancel_abort(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("user_cancel_reason:"), UserCancelOrder.waiting_for_reason)
async def user_cancel_reason(callback: CallbackQuery, state: FSMContext):
    _, order_id, idx = callback.data.split(":")
    idx = int(idx)
    if USER_CANCEL_REASONS[idx].startswith("–î—Ä—É–≥–æ–µ"):
        await state.set_state(UserCancelOrder.waiting_for_custom_reason)
        await callback.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        await callback.answer()
        return
    await finish_user_cancel_order(callback, state, order_id, USER_CANCEL_REASONS[idx])

@router.message(UserCancelOrder.waiting_for_custom_reason)
async def user_cancel_custom_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("cancel_order_id")
    await finish_user_cancel_order(message, state, order_id, message.text)

async def finish_user_cancel_order(message_or_callback, state, order_id, reason):
    user_id = message_or_callback.from_user.id
    orders = get_user_orders(user_id)
    updated = False
    target_order = None # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
    for order in orders:
        if str(order['order_id']) == str(order_id):
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è"
            order['cancel_reason'] = reason
            updated = True
            target_order = order # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            break
    # –û–±–Ω–æ–≤–ª—è–µ–º orders.json –ø–æ–ª–Ω–æ—Å—Ç—å—é
    all_orders = []
    file_path = "orders.json"
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                all_orders = json.load(f)
            except json.JSONDecodeError:
                all_orders = []
    
    found_order = None
    for i, o in enumerate(all_orders):
        if str(o.get('order_id')) == str(order_id) and o.get('user_id') == user_id:
            all_orders[i]['status'] = "–û–∂–∏–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è"
            all_orders[i]['cancel_reason'] = reason
            found_order = all_orders[i] # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(all_orders, f, ensure_ascii=False, indent=4)
    await state.clear()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message_or_callback.message.edit_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await message_or_callback.answer()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª–Ω–æ–µ –∏–º—è
    full_name = get_full_name(found_order) if found_order else f"@{getattr(message_or_callback.from_user, 'username', 'N/A')}"
    admin_text = f"""
‚ùå <b>–ö–ª–∏–µ–Ω—Ç</b> {full_name} (ID: {user_id}) —Ö–æ—á–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ ‚Ññ{order_id}.

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}
"""
    await bot.send_message(
        ADMIN_ID,
        admin_text,
        parse_mode="HTML",
        reply_markup=get_admin_cancel_accept_keyboard(order_id)
    )

@admin_router.callback_query(F.data.startswith("admin_accept_cancel:"))
async def admin_accept_cancel_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ orders.json
    file_path = "orders.json"
    orders = []
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []
    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    target_order = next((o for o in orders if str(o.get("order_id")) == str(order_id)), None)
    user_id = target_order.get("user_id") if target_order else None
    work_type = target_order.get("work_type", "") if target_order else ""
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    new_orders = [o for o in orders if str(o.get("order_id")) != str(order_id)]
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)
    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if user_id:
        emoji = "‚ùå"
        work_type_str = work_type.replace("work_type_", "") if work_type else ""
        await bot.send_message(user_id, f"{emoji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–º—É: <b>{work_type_str}</b>", parse_mode="HTML")
    await callback.answer()

# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ–≥–¥–∞ –æ–Ω —Å–∞–º –±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑ ---
class AdminSelfTake(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∞ ---
def get_admin_price_keyboard():
    buttons = [
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"admin_price_{i}") for i in range(500, 2501, 500)],
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"admin_price_{i}") for i in range(3000, 5001, 1000)],

    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_deadline_keyboard():
    buttons = [
        [InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="admin_deadline_1 –¥–µ–Ω—å"),
         InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="admin_deadline_3 –¥–Ω—è"),
         InlineKeyboardButton(text="–î–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="admin_deadline_–î–æ –¥–µ–¥–ª–∞–π–Ω–∞")],
       
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_skip_comment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_skip_comment")]
    ])

def get_admin_self_confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="admin_self_send_to_pay")]
    ])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –∑–∞–∫–∞–∑' ---
@admin_router.callback_query(F.data.startswith("admin_self_take_"))
async def admin_self_take_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID): return
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(order_id=order_id)
    await state.set_state(AdminSelfTake.waiting_for_price)
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_admin_price_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_price_"), AdminSelfTake.waiting_for_price)
async def admin_self_take_price_choice(callback: CallbackQuery, state: FSMContext):
    price = callback.data.split("_")[-1]
    await state.update_data(price=price)
    await state.set_state(AdminSelfTake.waiting_for_deadline)
    await callback.message.edit_text("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é(–∫–æ–ª–ª-–≤–æ –¥–Ω–µ–π) :", reply_markup=get_admin_deadline_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_price_manual", AdminSelfTake.waiting_for_price)
async def admin_self_take_price_manual(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–æ–≤–∞ —Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —Å—Ç–æ–∏—Ç
    await state.set_state(AdminSelfTake.waiting_for_price)
    await callback.answer()

@admin_router.message(AdminSelfTake.waiting_for_price)
async def admin_self_take_price_manual_input(message: Message, state: FSMContext):
    print("–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é —Ü–µ–Ω—ã:", message.text)
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=message.text)
    await state.set_state(AdminSelfTake.waiting_for_deadline)
    await message.answer("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_admin_deadline_keyboard())

@admin_router.callback_query(F.data.startswith("admin_deadline_"), AdminSelfTake.waiting_for_deadline)
async def admin_self_take_deadline_choice(callback: CallbackQuery, state: FSMContext):
    deadline = callback.data.split("_", 2)[-1]
    await state.update_data(deadline=deadline)
    await state.set_state(AdminSelfTake.waiting_for_comment)
    await callback.message.edit_text("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_admin_skip_comment_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_deadline_manual", AdminSelfTake.waiting_for_deadline)
async def admin_self_take_deadline_manual(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—Ä—É—á–Ω—É—é:")
    await state.set_state(AdminSelfTake.waiting_for_deadline)
    await callback.answer()

@admin_router.message(AdminSelfTake.waiting_for_deadline)
async def admin_self_take_deadline_manual_input(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(AdminSelfTake.waiting_for_comment)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_admin_skip_comment_keyboard())

@admin_router.message(AdminSelfTake.waiting_for_comment)
async def admin_self_take_comment_input(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(AdminSelfTake.waiting_for_confirm)
    await show_admin_self_confirm(message, state)

@admin_router.callback_query(F.data == "admin_skip_comment", AdminSelfTake.waiting_for_comment)
async def admin_self_take_skip_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="")
    await state.set_state(AdminSelfTake.waiting_for_confirm)
    await show_admin_self_confirm(callback.message, state)
    await callback.answer()

def pluralize_days(n):
    try:
        n = int(n)
    except (ValueError, TypeError):
        return str(n)
    if 11 <= n % 100 <= 14:
        return f"{n} –¥–Ω–µ–π"
    elif n % 10 == 1:
        return f"{n} –¥–µ–Ω—å"
    elif 2 <= n % 10 <= 4:
        return f"{n} –¥–Ω—è"
    else:
        return f"{n} –¥–Ω–µ–π"

async def show_admin_self_confirm(message_or_callback, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    price = data.get("price")
    deadline = data.get("deadline")
    comment = data.get("comment", "")
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –¥–Ω–µ–π, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
    text = f"\n<b>üìù–ó–∞—è–≤–∫–∞ ‚Ññ{order_id}</b>\n<b>üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ\n<b>üìå–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {deadline_str}"
    if comment:
        text += f"\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    text += "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –æ–ø–ª–∞—Ç—É."
    await message_or_callback.answer(text, parse_mode="HTML", reply_markup=get_admin_self_confirm_keyboard())

@admin_router.callback_query(F.data == "admin_self_send_to_pay", AdminSelfTake.waiting_for_confirm)
async def admin_self_take_send_to_pay(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    price = data.get("price")
    deadline = data.get("deadline")
    comment = data.get("comment", "")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ JSON
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['executor_offer'] = {
                'price': price,
                'deadline': deadline,
                'executor_id': int(ADMIN_ID),
                'executor_username': 'admin',
                'executor_full_name': get_full_name(callback.from_user),
                'executor_comment': comment
            }
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            target_order = order
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    customer_id = target_order.get('user_id')
    if customer_id:
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
        customer_text = f"""
‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–º—É: {work_type} –≥–æ—Ç–æ–≤–∞ –∫ –æ–ø–ª–∞—Ç–µ!

<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ.
<b>–°—Ä–æ–∫:</b> {deadline_str}
"""
        if comment:
            customer_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
        customer_text += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ."
        payment_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[payment_button]])
        try:
            await bot.send_message(customer_id, customer_text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {customer_id}")
    await callback.message.edit_text(f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É.")
    await state.clear()

@executor_router.callback_query(F.data.startswith("executor_back_to_materials:"))
async def executor_back_to_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º executor_show_materials_handler
    class DummyCallback:
        def __init__(self, data, message, from_user):
            self.data = data
            self.message = message
            self.from_user = from_user
    dummy_callback = DummyCallback(f"executor_show_materials:{order_id}", callback.message, callback.from_user)
    await executor_show_materials_handler(dummy_callback, state)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_back_to_invite"))
async def executor_back_to_invite_handler(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º order_id —Ç–æ–ª—å–∫–æ –∏–∑ callback.data
    if ":" in callback.data:
        order_id = callback.data.split(":", 1)[1]
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)
        return
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    work_type = order.get('work_type', 'N/A').replace('work_type_', '')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
    ])
    await callback.message.edit_text(executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    await callback.answer()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
def get_executor_final_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"executor_send_offer:{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")]
    ])

def get_client_work_approval_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"client_accept_work:{order_id}")],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"client_request_revision:{order_id}")]
    ])

async def main():
    await dp.start_polling(bot)
   
if __name__ == "__main__":
    asyncio.run(main())

@router.callback_query(F.data.startswith("client_accept_work:"))
async def client_accept_work(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(':')[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    target_order['status'] = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    await callback.message.edit_text("üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—É! –†–∞–¥—ã –±—ã–ª–∏ –ø–æ–º–æ—á—å.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if target_order.get('executor_id'):
        try:
            await bot.send_message(target_order.get('executor_id'), f"üéâ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}!")
        except: pass
    try:
        await bot.send_message(ADMIN_ID, f"üéâ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.")
    except: pass
    
    await callback.answer()

@router.callback_query(F.data.startswith("client_request_revision:"))
async def client_request_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(':')[-1])
    await state.set_state(ClientRevision.waiting_for_revision_comment)
    await state.update_data(revision_order_id=order_id)
    await callback.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    await callback.answer()

@router.message(ClientRevision.waiting_for_revision_comment)
async def process_revision_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('revision_order_id')
    comment = message.text
    
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
        await state.clear()
        return

    target_order['status'] = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    target_order['revision_comment'] = comment
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
        
    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é. –û–∂–∏–¥–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    executor_id = target_order.get('executor_id')
    if executor_id:
        try:
            await bot.send_message(
                executor_id,
                f"‚ùóÔ∏è–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</b>\n{comment}",
                parse_mode="HTML"
            )
        except: pass
    try:
        await bot.send_message(
            ADMIN_ID,
            f"‚ùóÔ∏è–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{comment}",
            parse_mode="HTML"
        )
    except: pass
        
    await state.clear()


# --- –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ ---
# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ main.py)

